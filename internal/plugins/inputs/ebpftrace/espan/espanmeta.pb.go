// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: espanmeta.proto

package espan

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Kind int32

const (
	Kind_Client   Kind = 0
	Kind_Server   Kind = 1
	Kind_Internal Kind = 2
	Kind_Producer Kind = 3
	Kind_Consumer Kind = 4
)

var Kind_name = map[int32]string{
	0: "Client",
	1: "Server",
	2: "Internal",
	3: "Producer",
	4: "Consumer",
}

var Kind_value = map[string]int32{
	"Client":   0,
	"Server":   1,
	"Internal": 2,
	"Producer": 3,
	"Consumer": 4,
}

func (x Kind) String() string {
	return proto.EnumName(Kind_name, int32(x))
}

func (Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d115bcc9fa8dfe17, []int{0}
}

type Direction int32

const (
	Direction_DOUT Direction = 0
	Direction_DIN  Direction = 1
)

var Direction_name = map[int32]string{
	0: "DOUT",
	1: "DIN",
}

var Direction_value = map[string]int32{
	"DOUT": 0,
	"DIN":  1,
}

func (x Direction) String() string {
	return proto.EnumName(Direction_name, int32(x))
}

func (Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d115bcc9fa8dfe17, []int{1}
}

type AppSampled int32

const (
	AppSampled_SampleAuto     AppSampled = 0
	AppSampled_SampleRejected AppSampled = 1
	AppSampled_SampleKept     AppSampled = 2
)

var AppSampled_name = map[int32]string{
	0: "SampleAuto",
	1: "SampleRejected",
	2: "SampleKept",
}

var AppSampled_value = map[string]int32{
	"SampleAuto":     0,
	"SampleRejected": 1,
	"SampleKept":     2,
}

func (x AppSampled) String() string {
	return proto.EnumName(AppSampled_name, int32(x))
}

func (AppSampled) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d115bcc9fa8dfe17, []int{2}
}

type Encode int32

const (
	Encode_EncDec Encode = 0
	Encode_EncHex Encode = 1
)

var Encode_name = map[int32]string{
	0: "EncDec",
	1: "EncHex",
}

var Encode_value = map[string]int32{
	"EncDec": 0,
	"EncHex": 1,
}

func (x Encode) String() string {
	return proto.EnumName(Encode_name, int32(x))
}

func (Encode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d115bcc9fa8dfe17, []int{3}
}

type SpanMetaList struct {
	SpanMetas []*SpanMeta `protobuf:"bytes,1,rep,name=SpanMetas,proto3" json:"SpanMetas,omitempty"`
}

func (m *SpanMetaList) Reset()         { *m = SpanMetaList{} }
func (m *SpanMetaList) String() string { return proto.CompactTextString(m) }
func (*SpanMetaList) ProtoMessage()    {}
func (*SpanMetaList) Descriptor() ([]byte, []int) {
	return fileDescriptor_d115bcc9fa8dfe17, []int{0}
}
func (m *SpanMetaList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpanMetaList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpanMetaList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpanMetaList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanMetaList.Merge(m, src)
}
func (m *SpanMetaList) XXX_Size() int {
	return m.Size()
}
func (m *SpanMetaList) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanMetaList.DiscardUnknown(m)
}

var xxx_messageInfo_SpanMetaList proto.InternalMessageInfo

func (m *SpanMetaList) GetSpanMetas() []*SpanMeta {
	if m != nil {
		return m.SpanMetas
	}
	return nil
}

type SpanMeta struct {
	SpanID         uint64 `protobuf:"varint,1,opt,name=SpanID,proto3" json:"SpanID,omitempty"`
	ThreadTraceID  uint64 `protobuf:"varint,2,opt,name=ThreadTraceID,proto3" json:"ThreadTraceID,omitempty"`
	NetTraceIDLow  uint64 `protobuf:"varint,3,opt,name=NetTraceIDLow,proto3" json:"NetTraceIDLow,omitempty"`
	NetTraceIDHigh uint64 `protobuf:"varint,4,opt,name=NetTraceIDHigh,proto3" json:"NetTraceIDHigh,omitempty"`
	EParentID      uint64 `protobuf:"varint,5,opt,name=EParentID,proto3" json:"EParentID,omitempty"`
	ETraceIDLow    uint64 `protobuf:"varint,6,opt,name=ETraceIDLow,proto3" json:"ETraceIDLow,omitempty"`
	ETraceIDHigh   uint64 `protobuf:"varint,7,opt,name=ETraceIDHigh,proto3" json:"ETraceIDHigh,omitempty"`
	// additional fields for application tracing
	AppParentID    uint64     `protobuf:"varint,8,opt,name=AppParentID,proto3" json:"AppParentID,omitempty"`
	AppTraceIDLow  uint64     `protobuf:"varint,9,opt,name=AppTraceIDLow,proto3" json:"AppTraceIDLow,omitempty"`
	AppTraceIDHigh uint64     `protobuf:"varint,10,opt,name=AppTraceIDHigh,proto3" json:"AppTraceIDHigh,omitempty"`
	AppSampled     AppSampled `protobuf:"varint,11,opt,name=AppSampled,proto3,enum=espan.AppSampled" json:"AppSampled,omitempty"`
	Encode         Encode     `protobuf:"varint,12,opt,name=Encode,proto3,enum=espan.Encode" json:"Encode,omitempty"`
	Direction      Direction  `protobuf:"varint,13,opt,name=Direction,proto3,enum=espan.Direction" json:"Direction,omitempty"`
	Kind           Kind       `protobuf:"varint,14,opt,name=Kind,proto3,enum=espan.Kind" json:"Kind,omitempty"`
}

func (m *SpanMeta) Reset()         { *m = SpanMeta{} }
func (m *SpanMeta) String() string { return proto.CompactTextString(m) }
func (*SpanMeta) ProtoMessage()    {}
func (*SpanMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_d115bcc9fa8dfe17, []int{1}
}
func (m *SpanMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpanMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpanMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpanMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanMeta.Merge(m, src)
}
func (m *SpanMeta) XXX_Size() int {
	return m.Size()
}
func (m *SpanMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanMeta.DiscardUnknown(m)
}

var xxx_messageInfo_SpanMeta proto.InternalMessageInfo

func (m *SpanMeta) GetSpanID() uint64 {
	if m != nil {
		return m.SpanID
	}
	return 0
}

func (m *SpanMeta) GetThreadTraceID() uint64 {
	if m != nil {
		return m.ThreadTraceID
	}
	return 0
}

func (m *SpanMeta) GetNetTraceIDLow() uint64 {
	if m != nil {
		return m.NetTraceIDLow
	}
	return 0
}

func (m *SpanMeta) GetNetTraceIDHigh() uint64 {
	if m != nil {
		return m.NetTraceIDHigh
	}
	return 0
}

func (m *SpanMeta) GetEParentID() uint64 {
	if m != nil {
		return m.EParentID
	}
	return 0
}

func (m *SpanMeta) GetETraceIDLow() uint64 {
	if m != nil {
		return m.ETraceIDLow
	}
	return 0
}

func (m *SpanMeta) GetETraceIDHigh() uint64 {
	if m != nil {
		return m.ETraceIDHigh
	}
	return 0
}

func (m *SpanMeta) GetAppParentID() uint64 {
	if m != nil {
		return m.AppParentID
	}
	return 0
}

func (m *SpanMeta) GetAppTraceIDLow() uint64 {
	if m != nil {
		return m.AppTraceIDLow
	}
	return 0
}

func (m *SpanMeta) GetAppTraceIDHigh() uint64 {
	if m != nil {
		return m.AppTraceIDHigh
	}
	return 0
}

func (m *SpanMeta) GetAppSampled() AppSampled {
	if m != nil {
		return m.AppSampled
	}
	return AppSampled_SampleAuto
}

func (m *SpanMeta) GetEncode() Encode {
	if m != nil {
		return m.Encode
	}
	return Encode_EncDec
}

func (m *SpanMeta) GetDirection() Direction {
	if m != nil {
		return m.Direction
	}
	return Direction_DOUT
}

func (m *SpanMeta) GetKind() Kind {
	if m != nil {
		return m.Kind
	}
	return Kind_Client
}

func noinit() {
	proto.RegisterEnum("espan.Kind", Kind_name, Kind_value)
	proto.RegisterEnum("espan.Direction", Direction_name, Direction_value)
	proto.RegisterEnum("espan.AppSampled", AppSampled_name, AppSampled_value)
	proto.RegisterEnum("espan.Encode", Encode_name, Encode_value)
	proto.RegisterType((*SpanMetaList)(nil), "espan.SpanMetaList")
	proto.RegisterType((*SpanMeta)(nil), "espan.SpanMeta")
}

func noinit() { proto.RegisterFile("espanmeta.proto", fileDescriptor_d115bcc9fa8dfe17) }

var fileDescriptor_d115bcc9fa8dfe17 = []byte{
	// 483 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x93, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0xc7, 0xe3, 0x6d, 0xb6, 0x1f, 0xd3, 0x8f, 0x35, 0x3e, 0x20, 0x1f, 0x50, 0x28, 0x15, 0xa0,
	0xaa, 0x12, 0x95, 0x58, 0x8e, 0x08, 0x89, 0xb2, 0x89, 0xd4, 0x6a, 0x97, 0x65, 0x95, 0x96, 0x0b,
	0xb7, 0x90, 0x8c, 0xd8, 0xa0, 0xd6, 0xb1, 0x5c, 0x17, 0x78, 0x0c, 0x2e, 0xbc, 0x13, 0xc7, 0x3d,
	0x72, 0x44, 0xed, 0x8b, 0x20, 0x3b, 0xe9, 0x26, 0xe1, 0xe6, 0xff, 0x6f, 0x7e, 0xf2, 0xcc, 0x38,
	0x0a, 0x9c, 0xe1, 0x56, 0x46, 0x62, 0x83, 0x3a, 0x9a, 0x4a, 0x95, 0xe9, 0x8c, 0x9d, 0x5a, 0x30,
	0x7a, 0x03, 0xbd, 0xa5, 0x8c, 0xc4, 0x7b, 0xd4, 0xd1, 0x55, 0xba, 0xd5, 0xec, 0x05, 0x74, 0x8e,
	0x79, 0xcb, 0xc9, 0xb0, 0x31, 0xee, 0x9e, 0x9f, 0x4d, 0xad, 0x3a, 0x3d, 0xf2, 0xb0, 0x34, 0x46,
	0xbf, 0x5c, 0x68, 0x1f, 0x13, 0x7b, 0x08, 0x4d, 0x73, 0x5e, 0xf8, 0x9c, 0x0c, 0xc9, 0xd8, 0x0d,
	0x8b, 0xc4, 0x9e, 0x42, 0x7f, 0x75, 0xab, 0x30, 0x4a, 0x56, 0x2a, 0x8a, 0x71, 0xe1, 0xf3, 0x13,
	0x5b, 0xae, 0x43, 0x63, 0x5d, 0xa3, 0x2e, 0xd2, 0x55, 0xf6, 0x9d, 0x37, 0x72, 0xab, 0x06, 0xd9,
	0x73, 0x18, 0x94, 0x60, 0x9e, 0x7e, 0xb9, 0xe5, 0xae, 0xd5, 0xfe, 0xa3, 0xec, 0x11, 0x74, 0x82,
	0x9b, 0x48, 0xa1, 0xd0, 0x0b, 0x9f, 0x9f, 0x5a, 0xa5, 0x04, 0x6c, 0x08, 0xdd, 0xa0, 0xd2, 0xa9,
	0x69, 0xeb, 0x55, 0xc4, 0x46, 0xd0, 0x0b, 0xaa, 0x5d, 0x5a, 0x56, 0xa9, 0x31, 0x73, 0xcb, 0x4c,
	0xca, 0xfb, 0x2e, 0xed, 0xfc, 0x96, 0x0a, 0x32, 0x3b, 0xcd, 0xa4, 0xac, 0x74, 0xea, 0xe4, 0x3b,
	0xd5, 0xa0, 0xd9, 0xa9, 0x04, 0xb6, 0x1b, 0xe4, 0x3b, 0xd5, 0x29, 0x7b, 0x09, 0x30, 0x93, 0x72,
	0x19, 0x6d, 0xe4, 0x1a, 0x13, 0xde, 0x1d, 0x92, 0xf1, 0xe0, 0xfc, 0x41, 0xf1, 0x71, 0xca, 0x42,
	0x58, 0x91, 0xd8, 0x33, 0x68, 0x06, 0x22, 0xce, 0x12, 0xe4, 0x3d, 0xab, 0xf7, 0x0b, 0x3d, 0x87,
	0x61, 0x51, 0x64, 0x53, 0xe8, 0xf8, 0xa9, 0xc2, 0x58, 0xa7, 0x99, 0xe0, 0x7d, 0x6b, 0xd2, 0xc2,
	0xbc, 0xe7, 0x61, 0xa9, 0xb0, 0xc7, 0xe0, 0x5e, 0xa6, 0x22, 0xe1, 0x03, 0xab, 0x76, 0x0b, 0xd5,
	0xa0, 0xd0, 0x16, 0x26, 0xf3, 0x5c, 0x60, 0x00, 0xcd, 0x8b, 0x75, 0x8a, 0x42, 0x53, 0xc7, 0x9c,
	0x97, 0xa8, 0xbe, 0xa1, 0xa2, 0x84, 0xf5, 0xa0, 0xbd, 0x10, 0x1a, 0x95, 0x88, 0xd6, 0xf4, 0xc4,
	0xa4, 0x1b, 0x95, 0x25, 0xbb, 0x18, 0x15, 0x6d, 0x98, 0x74, 0x91, 0x89, 0xed, 0x6e, 0x83, 0x8a,
	0xba, 0x13, 0xaf, 0x32, 0x1a, 0x6b, 0x83, 0xeb, 0x7f, 0xf8, 0xb8, 0xa2, 0x0e, 0x6b, 0x41, 0xc3,
	0x5f, 0x5c, 0x53, 0x32, 0x79, 0x5b, 0x7d, 0x14, 0x36, 0x00, 0xc8, 0x8f, 0xb3, 0x9d, 0xce, 0xa8,
	0xc3, 0x18, 0x0c, 0xf2, 0x1c, 0xe2, 0x57, 0x8c, 0x35, 0x26, 0x94, 0x94, 0xce, 0x25, 0x4a, 0x4d,
	0x4f, 0x26, 0xc3, 0xe3, 0x1b, 0x99, 0x09, 0x03, 0x11, 0xfb, 0x18, 0xe7, 0xd3, 0x06, 0x22, 0x9e,
	0xe3, 0x0f, 0x4a, 0xde, 0x3d, 0xf9, 0xbd, 0xf7, 0xc8, 0xdd, 0xde, 0x23, 0x7f, 0xf7, 0x1e, 0xf9,
	0x79, 0xf0, 0x9c, 0xbb, 0x83, 0xe7, 0xfc, 0x39, 0x78, 0xce, 0xa7, 0xd6, 0xf4, 0xb5, 0xdd, 0xfd,
	0x73, 0xd3, 0xfe, 0x55, 0xaf, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x02, 0xce, 0x90, 0x68,
	0x03, 0x00, 0x00,
}

func (m *SpanMetaList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpanMetaList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpanMetaList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpanMetas) > 0 {
		for iNdEx := len(m.SpanMetas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpanMetas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEspanmeta(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SpanMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpanMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpanMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		i = encodeVarintEspanmeta(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x70
	}
	if m.Direction != 0 {
		i = encodeVarintEspanmeta(dAtA, i, uint64(m.Direction))
		i--
		dAtA[i] = 0x68
	}
	if m.Encode != 0 {
		i = encodeVarintEspanmeta(dAtA, i, uint64(m.Encode))
		i--
		dAtA[i] = 0x60
	}
	if m.AppSampled != 0 {
		i = encodeVarintEspanmeta(dAtA, i, uint64(m.AppSampled))
		i--
		dAtA[i] = 0x58
	}
	if m.AppTraceIDHigh != 0 {
		i = encodeVarintEspanmeta(dAtA, i, uint64(m.AppTraceIDHigh))
		i--
		dAtA[i] = 0x50
	}
	if m.AppTraceIDLow != 0 {
		i = encodeVarintEspanmeta(dAtA, i, uint64(m.AppTraceIDLow))
		i--
		dAtA[i] = 0x48
	}
	if m.AppParentID != 0 {
		i = encodeVarintEspanmeta(dAtA, i, uint64(m.AppParentID))
		i--
		dAtA[i] = 0x40
	}
	if m.ETraceIDHigh != 0 {
		i = encodeVarintEspanmeta(dAtA, i, uint64(m.ETraceIDHigh))
		i--
		dAtA[i] = 0x38
	}
	if m.ETraceIDLow != 0 {
		i = encodeVarintEspanmeta(dAtA, i, uint64(m.ETraceIDLow))
		i--
		dAtA[i] = 0x30
	}
	if m.EParentID != 0 {
		i = encodeVarintEspanmeta(dAtA, i, uint64(m.EParentID))
		i--
		dAtA[i] = 0x28
	}
	if m.NetTraceIDHigh != 0 {
		i = encodeVarintEspanmeta(dAtA, i, uint64(m.NetTraceIDHigh))
		i--
		dAtA[i] = 0x20
	}
	if m.NetTraceIDLow != 0 {
		i = encodeVarintEspanmeta(dAtA, i, uint64(m.NetTraceIDLow))
		i--
		dAtA[i] = 0x18
	}
	if m.ThreadTraceID != 0 {
		i = encodeVarintEspanmeta(dAtA, i, uint64(m.ThreadTraceID))
		i--
		dAtA[i] = 0x10
	}
	if m.SpanID != 0 {
		i = encodeVarintEspanmeta(dAtA, i, uint64(m.SpanID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEspanmeta(dAtA []byte, offset int, v uint64) int {
	offset -= sovEspanmeta(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SpanMetaList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SpanMetas) > 0 {
		for _, e := range m.SpanMetas {
			l = e.Size()
			n += 1 + l + sovEspanmeta(uint64(l))
		}
	}
	return n
}

func (m *SpanMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpanID != 0 {
		n += 1 + sovEspanmeta(uint64(m.SpanID))
	}
	if m.ThreadTraceID != 0 {
		n += 1 + sovEspanmeta(uint64(m.ThreadTraceID))
	}
	if m.NetTraceIDLow != 0 {
		n += 1 + sovEspanmeta(uint64(m.NetTraceIDLow))
	}
	if m.NetTraceIDHigh != 0 {
		n += 1 + sovEspanmeta(uint64(m.NetTraceIDHigh))
	}
	if m.EParentID != 0 {
		n += 1 + sovEspanmeta(uint64(m.EParentID))
	}
	if m.ETraceIDLow != 0 {
		n += 1 + sovEspanmeta(uint64(m.ETraceIDLow))
	}
	if m.ETraceIDHigh != 0 {
		n += 1 + sovEspanmeta(uint64(m.ETraceIDHigh))
	}
	if m.AppParentID != 0 {
		n += 1 + sovEspanmeta(uint64(m.AppParentID))
	}
	if m.AppTraceIDLow != 0 {
		n += 1 + sovEspanmeta(uint64(m.AppTraceIDLow))
	}
	if m.AppTraceIDHigh != 0 {
		n += 1 + sovEspanmeta(uint64(m.AppTraceIDHigh))
	}
	if m.AppSampled != 0 {
		n += 1 + sovEspanmeta(uint64(m.AppSampled))
	}
	if m.Encode != 0 {
		n += 1 + sovEspanmeta(uint64(m.Encode))
	}
	if m.Direction != 0 {
		n += 1 + sovEspanmeta(uint64(m.Direction))
	}
	if m.Kind != 0 {
		n += 1 + sovEspanmeta(uint64(m.Kind))
	}
	return n
}

func sovEspanmeta(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEspanmeta(x uint64) (n int) {
	return sovEspanmeta(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SpanMetaList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEspanmeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpanMetaList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpanMetaList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanMetas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEspanmeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEspanmeta
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEspanmeta
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpanMetas = append(m.SpanMetas, &SpanMeta{})
			if err := m.SpanMetas[len(m.SpanMetas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEspanmeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEspanmeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpanMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEspanmeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpanMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpanMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanID", wireType)
			}
			m.SpanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEspanmeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpanID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreadTraceID", wireType)
			}
			m.ThreadTraceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEspanmeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ThreadTraceID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetTraceIDLow", wireType)
			}
			m.NetTraceIDLow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEspanmeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetTraceIDLow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetTraceIDHigh", wireType)
			}
			m.NetTraceIDHigh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEspanmeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetTraceIDHigh |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EParentID", wireType)
			}
			m.EParentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEspanmeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EParentID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ETraceIDLow", wireType)
			}
			m.ETraceIDLow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEspanmeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ETraceIDLow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ETraceIDHigh", wireType)
			}
			m.ETraceIDHigh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEspanmeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ETraceIDHigh |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppParentID", wireType)
			}
			m.AppParentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEspanmeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppParentID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTraceIDLow", wireType)
			}
			m.AppTraceIDLow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEspanmeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppTraceIDLow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppTraceIDHigh", wireType)
			}
			m.AppTraceIDHigh = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEspanmeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppTraceIDHigh |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppSampled", wireType)
			}
			m.AppSampled = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEspanmeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppSampled |= AppSampled(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encode", wireType)
			}
			m.Encode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEspanmeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Encode |= Encode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEspanmeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= Direction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEspanmeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= Kind(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEspanmeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEspanmeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEspanmeta(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEspanmeta
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEspanmeta
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEspanmeta
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEspanmeta
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEspanmeta
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEspanmeta
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEspanmeta        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEspanmeta          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEspanmeta = fmt.Errorf("proto: unexpected end of group")
)
